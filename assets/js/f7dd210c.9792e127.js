(self.webpackChunktypes_doodler=self.webpackChunktypes_doodler||[]).push([[904],{1942:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return p},toc:function(){return d},default:function(){return m}});var r=n(2122),a=n(9756),l=(n(7294),n(3905)),i=["components"],o={sidebar_position:2},p={unversionedId:"utils/numbers",id:"utils/numbers",isDocsHomePage:!1,title:"Numbers",description:"palindrome",source:"@site/../docs/utils/numbers.md",sourceDirName:"utils",slug:"/utils/numbers",permalink:"/types-doodler/docs/utils/numbers",editUrl:"https://github.com/enbermudez/types-doodler/../docs/utils/numbers.md",version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Arrays",permalink:"/types-doodler/docs/utils/arrays"},next:{title:"Strings",permalink:"/types-doodler/docs/utils/strings"}},d=[{value:"palindrome",id:"palindrome",children:[]},{value:"prime",id:"prime",children:[]}],u={toc:d};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"palindrome"},"palindrome"),(0,l.kt)("p",null,"Checks whether the provided number is a palindrome or not."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const td = require('types-doodler');\n\nconst options = { num: 101 };\n\nconst palindrome = td.numbers.palindrome(options);\n\nconsole.log(palindrome); // true\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Required"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"num")),(0,l.kt)("td",{parentName:"tr",align:null},"Number to be checked."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"number")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f")))),(0,l.kt)("h2",{id:"prime"},"prime"),(0,l.kt)("p",null,"Checks whether the provided number is a prime number or not."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const td = require('types-doodler');\n\nconst options = { num: 5 };\n\nconst prime = td.numbers.prime(options);\n\nconsole.log(prime); // true\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Required"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"num")),(0,l.kt)("td",{parentName:"tr",align:null},"Number to be checked."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"number")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f")))))}m.isMDXComponent=!0}}]);